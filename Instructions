
Create a new express project
npm install express-generator -g
express auth-exercise --ejs

Install and run nodemon to make our life easier
npm install -g nodemon
cd auth-exercise && npm install
nodemon auth-exercise

Install Passport:
npm install passport --save

In this tutorial, we will use the Local Authentication Strategy of Passport and authenticate the users against a locally configured Mongo DB instance, storing the user details in the database. For using the Local Authentication Strategy, we need to install the passport-local module: 
npm install passport-local --save

Now since we will be save usernames and passwords in mongo, we need to install Mongoose
npm install mongoose --save

To be neat and clean, we will store our database configuration in a separate file. Create a new folder/file: db/db.js and input the following:
module.exports = {  
  'url' : 'mongodb://localhost/passport'  
}

Next, in your app.js, connect to the db (note how easy it was to get the db variable):
var dbConfig = require('.db/db.js');
var mongoose = require('mongoose');
mongoose.connect(dbConfig.url);

OK, so we have to remember, Passport just provides the mechanism to handle authentication. Not the ability to handle a session (the instance of a user accessing a website and its associated data, etc.). This leaves the onus of implementing session-handling ourselves and for that we will be using express-session. 
First, we need to install express-session:
npm install express-session --save




Next, open up app.js and paste in the following code below before configuring the routes:
	// Configuring Passport
var passport = require('passport');
var expressSession = require('express-session');

app.use(expressSession({
  secret: 'mySecretKey',
  resave: false,
  saveUninitialized: false
}));

app.use(passport.initialize());
app.use(passport.session());

OK! So now here is where we need to create our own concrete strategies for how we initialize (auth procedures), login, signup, users.  Passport needs to serialize and deserialize (read about Serialization) user instances from a session store in order to support login sessions. This is so every subsequent request will not contain the user credentials. It provides two methods serializeUser and deserializeUser for this purpose. So we need to create a folder and a file to store our concrete strategies. First, letâ€™s tackle creating a model for our data. 

// models/user.js
var mongoose = require('mongoose');

module.exports = mongoose.model('User', {
	id: String,
	username: String,
	password: String,
	email: String,
	firstName: String,
	lastName: String
});


Now let us insert some basic boilerplate code for our signup strategy. But first we need to install two components: 
npm install bcrypt-nodejs --save
npm install passport-local --save


 

// passport/signup.js
var LocalStrategy = require('passport-local').Strategy;
var User = require('../models/user');
var bCrypt = require('bcrypt-nodejs');

module.exports = function(passport){
passport.use('signup', new LocalStrategy({
  passReqToCallback : true // allows us to pass back the entire request to the callback
},
function(req, username, password, done){
  var findOrCreateUser = function(){
  // find a user in Mongo with provided username
    User.findOne({ 'username' :  username }, function(err, user) {
      // In case of any error, return using the done method
      if (err){
        console.log('Error in SignUp: '+err);
        return done(err);
      }
      // already exists
      if (user) {
       console.log('User already exists with username: '+username);
       return done(null, false, req.flash('message','User Exists'));
      } else {
        // if there is no user with that email
        // create the user
        var newUser = new User();

        // set the user's local credentials
        newUser.username = username;
        newUser.password = createHash(password);
        newUser.email = req.param('email');
        newUser.firstName = req.param('firstName');
        newUser.lastName = req.param('lastName');

        // save the user
        newUser.save(function(err) {
        if (err){
         console.log('Error in Saving user: '+err);  
         throw err;  
        }
         console.log('User Registration succesful');    
         return done(null, newUser);
        });
     }
    });
   };
  // Delay the execution of findOrCreateUser and execute the method
  // in the next tick of the event loop
  process.nextTick(findOrCreateUser);
 })
);

// Generates hash using bCrypt
var createHash = function(password){
 return bCrypt.hashSync(password, bCrypt.genSaltSync(10), null);
 }
}


Now we need to add the boilerplate code for our login:

// passport/login.js
var LocalStrategy = require('passport-local').Strategy;
var User = require('../models/user');
var bCrypt = require('bcrypt-nodejs');

module.exports = function(passport){
  passport.use('login', new LocalStrategy({
    passReqToCallback : true
    },
    function(req, username, password, done) { 
    // check in mongo if a user with username exists or not
      User.findOne({ 'username' :  username }, 
         function(err, user) {
         // In case of any error, return using the done method
         if (err)
           return done(err);
           // Username does not exist, log the error and redirect back
           if (!user){
              console.log('User Not Found with username '+username);
              return done(null, false, req.flash('message', 'User Not found.'));                 
           }
           // User exists but wrong password, log the error 
           if (!isValidPassword(user, password)){
              console.log('Invalid Password');
              return done(null, false, req.flash('message', 'Invalid Password')); 
              // redirect back to login page
           }
              // User and password both match, return user from done method
              // which will be treated like success
                return done(null, user);
          }
         );
       })
    );

    var isValidPassword = function(user, password){
        return bCrypt.compareSync(password, user.password);
    } 
}

















And guess what we do next? Yep, input the boilerplate code for our init strategy, which requires login and signup:

// passport/init.js
var login = require('./login');
var signup = require('./signup');
var User = require('../models/user');

module.exports = function(passport){

  // Passport needs to serialize and deserialize users to support persistent login sessions
  passport.serializeUser(function(user, done) {
    console.log('serializing user: ');console.log(user);
    done(null, user._id);
  });

  passport.deserializeUser(function(id, done) {
    User.findById(id, function(err, user) {
      console.log('deserializing user:',user);
      done(err, user);
   });
  });

  // Setting up Passport Strategies for Login and SignUp/Registration
  login(passport);
  signup(passport);
}



Now, we define some routes before we move on to our views. This goes into our routes/index.js file:














var express = require('express');
var router = express.Router();

var isAuthenticated = function (req, res, next) {
	// if user is authenticated in the session, call the next() to call the next request handler 
	// Passport adds this method to request object. A middleware is allowed to add properties to
	// request and response objects
	if (req.isAuthenticated())
		return next();
	// if the user is not authenticated then redirect him to the login page
	res.redirect('/');
}

module.exports = function(passport){
	/* GET login page. */
	router.get('/', function(req, res) {
    	// Display the Login page with any flash message, if any
		res.render('index', { message: req.flash('message') });
	});

	/* Handle Login POST */
	router.post('/login', passport.authenticate('login', {
		successRedirect: '/home',
		failureRedirect: '/',
		failureFlash : true  
	}));

	/* GET Registration Page */
	router.get('/signup', function(req, res){
		res.render('register',{message: req.flash('message')});
	});

	/* Handle Registration POST */
	router.post('/signup', passport.authenticate('signup', {
		successRedirect: '/home',
		failureRedirect: '/signup',
		failureFlash : true  
	}));

	/* GET Home Page */
	router.get('/home', isAuthenticated, function(req, res){
		res.render('home', { user: req.user });
	});

	/* Handle Logout */
	router.get('/signout', function(req, res) {
		req.logout();
		res.redirect('/');
	});
	return router;
}




Next, in our app.js file we need to implement connect-flash, instantiate the initatialization, and pass the passport object to the routes/index.js file. At the end of the day, your app.js file should look like this:

//app.js
var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');

var dbConfig = require('./db/db.js');
var mongoose = require('mongoose');
mongoose.connect(dbConfig.url);

var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

// uncomment after placing your favicon in /public
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded());
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

// Configuring Passport
var passport = require('passport');
var expressSession = require('express-session');
// TODO - Why Do we need this key ?
app.use(expressSession({secret: 'mySecretKey'}));
app.use(passport.initialize());
app.use(passport.session());

 // Using the flash middleware provided by connect-flash to store messages in session
 // and displaying in templates
var flash = require('connect-flash');
app.use(flash());

// Initialize Passport
var initPassport = require('./passport/init');
initPassport(passport);

var routes = require('./routes/index')(passport);
app.use('/', routes);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
    var err = new Error('Not Found');
    err.status = 404;
    next(err);
});

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
    app.use(function(err, req, res, next) {
        res.status(err.status || 500);
        res.render('error', {
            message: err.message,
            error: err
        });
    });
}

module.exports = app;


Lastly, letâ€™s create our view: See the view in the auth-exercise project on my GH.
